// +build !

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitialization":       schema_pkg_apis_ocs_v1alpha1_OCSInitialization(ref),
		"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationSpec":   schema_pkg_apis_ocs_v1alpha1_OCSInitializationSpec(ref),
		"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationStatus": schema_pkg_apis_ocs_v1alpha1_OCSInitializationStatus(ref),
		"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.StorageCluster":          schema_pkg_apis_ocs_v1alpha1_StorageCluster(ref),
	}
}

func schema_pkg_apis_ocs_v1alpha1_OCSInitialization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCSInitialization is the Schema for the ocsinitialization API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationSpec", "github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.OCSInitializationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_ocs_v1alpha1_OCSInitializationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCSInitializationSpec defines the desired state of OCSInitialization",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_ocs_v1alpha1_OCSInitializationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCSInitializationStatus defines the observed state of OCSInitialization",
				Properties: map[string]spec.Schema{
					"storageClassesCreated": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"errorMessage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_ocs_v1alpha1_StorageCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageCluster is the Schema for the storageclusters API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.StorageClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.StorageClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.StorageClusterSpec", "github.com/openshift/ocs-operator/pkg/apis/ocs/v1alpha1.StorageClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}
